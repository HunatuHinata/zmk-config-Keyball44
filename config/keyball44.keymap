#define DEFAULT 0
#define NUM     1
#define SYM     2
#define FUN     3
#define MOUSE   4
#define SCROLL  5
#define SNIPE   6

#include <behaviors/mouse_keys.dtsi>
#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&lt {
    tapping-term-ms = <240>;
    flavor = "balanced";
    quick-tap-ms = <150>;
};

&mt {
    tapping-term-ms = <200>;
    flavor = "tap-preferred";
    quick-tap-ms = <150>;
};

&caps_word { continue-list = <UNDERSCORE MINUS>; };

/ {
    // custom shift using mod-morph 

    behaviors {
        cmqus: comma_question {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_QUESTION";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp QUESTION>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        dtsmi: dot_semi {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_SEMI";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp SEMI>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        bkslash_Under: Non_JIS {
            compatible = "zmk,behavior-mod-morph";
            label = "NON_JIS";
            bindings = <&kp NON_US_BACKSLASH>, <&kp UNDERSCORE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "QWRT";
            bindings = <
&kp TAB           &kp Q  &kp W         &kp E      &kp R  &kp T             &kp Y      &kp U  &kp I      &kp O    &kp P      &kp BACKSPACE
&kp LEFT_SHIFT    &kp A  &kp S         &kp D      &kp F  &kp G             &kp H      &kp J  &kp K      &kp L    &kp SEMI   &kp SQT
&kp LEFT_CONTROL  &kp Z  &kp X         &kp C      &kp V  &kp B             &kp N      &kp M  &kp COMMA  &kp DOT  &kp SLASH  &bkslash_Under
&kp LGUI          &none  &kp LEFT_ALT  &kp SPACE  &mo 1             &mo 2  &kp ENTER                                        &mo 4
            >;
        };

        number_layer {
            label = "NUM";
            bindings = <
&kp LANG_ZENKAKUHANKAKU  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp NUMBER_5             &kp NUMBER_6    &kp NUMBER_7  &kp NUMBER_8    &kp NUMBER_9     &kp NUMBER_0         &kp BACKSPACE
&kp LEFT_SHIFT           &kp F1        &kp F2        &kp F3        &kp F4        &kp F5                   &kp F6          &kp F7        &kp F8          &kp F9           &kp F10              &kp DELETE
&kp LEFT_CONTROL         &kp F11       &kp F12       &none         &none         &kp ESCAPE               &kp LEFT_ARROW  &kp UP_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp INTERNATIONAL_5  &kp INTERNATIONAL_4
&kp LEFT_WIN             &none         &kp LEFT_ALT  &kp SPACE     &trans                          &mo 3  &kp ENTER                                                                           &trans
            >;
        };

        symbol_layer {
            label = "SYM";
            bindings = <
&kp TAB           &kp EXCLAMATION  &kp AT_SIGN  &kp HASH          &kp DOLLAR         &kp PERCENT                  &kp CARET       &kp AMPERSAND  &kp ASTERISK      &kp LEFT_PARENTHESIS  &kp NON_US_BACKSLASH  &kp BACKSPACE
&kp LEFT_SHIFT    &kp CAPSLOCK     &kp INSERT   &kp HOME          &kp PAGE_UP        &kp PAGE_DOWN                &kp MINUS       &kp EQUAL      &kp LEFT_BRACKET  &kp RIGHT_BRACKET     &kp BACKSLASH         &kp DELETE
&kp LEFT_CONTROL  &kp END          &none        &kp C_PLAY_PAUSE  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP              &kp UNDERSCORE  &kp PLUS       &kp LEFT_BRACE    &kp RIGHT_BRACE       &kp NON_US_BACKSLASH  &kp C_MENU
&none             &none            &trans       &kp SPACE         &mo 3                                   &trans  &kp ENTER                                                                                    &none
            >;
        };

        scroll_layer {
            label = "SCROLL";
            bindings = <
&trans  &bt BT_CLR            &bt BT_SEL 0   &bt BT_SEL 1      &bt BT_SEL 2  &trans                        &kp KP_NUM       &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &trans     &kp BACKSPACE
&trans  &kp C_AL_MY_COMPUTER  &kp C_AL_CALC  &kp PRINTSCREEN   &trans        &trans                        &kp DOT          &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp COMMA  &kp DELETE
&trans  &kp C_AC_SEARCH       &kp C_AC_HOME  &kp C_AC_REFRESH  &kp C_POWER   &kp C_SLEEP_MODE              &kp KP_NUMBER_0  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &trans     &trans
&trans  &trans                &trans         &trans            &trans                              &trans  &trans                                                                         &trans
            >;
        };

        mouse_layer {
            label = "MOUSE";
            bindings = <
&none   &none           &none           &none         &none      &none              &none     &msc SCRL_LEFT  &msc SCRL_UP    &msc SCRL_RIGHT  &none  &none
&none   &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT  &none              &mkp MB4  &mkp LCLK       &mkp MCLK       &mkp RCLK        &none  &none
&none   &none           &none           &none         &none      &none              &mkp MB5  &none           &msc SCRL_DOWN  &none            &none  &none
&trans  &trans          &trans          &trans        &trans                &trans  &trans                                                            &none
            >;
        };

        function_layer {
            label = "FUN";
            bindings = <
&none   &kp F1  &kp F2   &kp F3   &kp F4   &none              &none  &none  &none  &none  &none  &none
&none   &kp F5  &kp F6   &kp F7   &kp F8   &none              &none  &none  &none  &none  &none  &none
&none   &kp F9  &kp F10  &kp F11  &kp F12  &none              &none  &none  &none  &none  &none  &none
&trans  &trans  &trans   &trans   &trans              &trans  &mo 5                              &trans
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans              &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans              &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans              &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans              &trans  &trans                                  &trans
            >;
        };
    };
};
